[{"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\index.js":"1","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\App.js":"2","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Authentication\\useAuthentication.js":"3","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Login\\Login.js":"4","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Home\\Home.js":"5","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Sidebar\\Sidebar.js":"6","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\PlayBar.js":"7","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Music Data Display\\MusicContainer.js":"8","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Login\\LoginLogo.js":"9","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Sidebar\\TimeOfDayGreeting.js":"10","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\ProgressBar.js":"11","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\PlayNextSong.js":"12","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\TrackControls.js":"13","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\NowPlayingPreview.js":"14","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\VolumeControls.js":"15","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\lib\\api.js":"16","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\RuntimeDisplay.js":"17","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\useRuntimeCounter.js":"18","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\FormatTime.js":"19"},{"size":234,"mtime":1633465715563,"results":"20","hashOfConfig":"21"},{"size":3422,"mtime":1633473122385,"results":"22","hashOfConfig":"21"},{"size":1887,"mtime":1633472870792,"results":"23","hashOfConfig":"21"},{"size":490,"mtime":1633151953086,"results":"24","hashOfConfig":"21"},{"size":2404,"mtime":1633467390597,"results":"25","hashOfConfig":"21"},{"size":2745,"mtime":1633473144133,"results":"26","hashOfConfig":"21"},{"size":3238,"mtime":1633464207238,"results":"27","hashOfConfig":"21"},{"size":9663,"mtime":1633477419474,"results":"28","hashOfConfig":"21"},{"size":303,"mtime":1633464207236,"results":"29","hashOfConfig":"21"},{"size":340,"mtime":1633464207244,"results":"30","hashOfConfig":"21"},{"size":1786,"mtime":1633464207240,"results":"31","hashOfConfig":"21"},{"size":1191,"mtime":1633464207239,"results":"32","hashOfConfig":"21"},{"size":4735,"mtime":1633464207241,"results":"33","hashOfConfig":"21"},{"size":1576,"mtime":1633464207238,"results":"34","hashOfConfig":"21"},{"size":1148,"mtime":1633464207241,"results":"35","hashOfConfig":"21"},{"size":5033,"mtime":1633464207245,"results":"36","hashOfConfig":"21"},{"size":330,"mtime":1633464207240,"results":"37","hashOfConfig":"21"},{"size":1724,"mtime":1633464207241,"results":"38","hashOfConfig":"21"},{"size":245,"mtime":1633464207237,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jdzbwn",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"47"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"47"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\index.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\App.js",["83"],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Authentication\\useAuthentication.js",["84"],"import { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default function UseAuth(code, setLoggedIn) {\r\n  const credentials = JSON.parse(localStorage.getItem(\"credentials\"));\r\n  useEffect(() => {\r\n    if (credentials === null) {\r\n      axios\r\n        .post(\"http://localhost:3001/callback/\", {\r\n          code,\r\n          credentials,\r\n        })\r\n        .then((res) => {\r\n          console.log(res)\r\n          const { accessToken, expiresIn, refreshToken } = res.data || {};\r\n          const credsObj = {\r\n            accessToken,\r\n            expiresIn,\r\n            refreshToken,\r\n            timeTokenExpiresMS: Date.now() + expiresIn * 1000,\r\n          };\r\n          localStorage.setItem(\"credentials\", JSON.stringify(credsObj));\r\n          window.history.pushState({}, null, \"/\");\r\n          setLoggedIn(true)\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          window.location = \"/\";\r\n        });\r\n    }\r\n    if (credentials) {\r\n      const refreshToken = JSON.parse(\r\n        localStorage.getItem(\"credentials\")\r\n      ).refreshToken;\r\n      const timeTokenExpiresMS = JSON.parse(\r\n        localStorage.getItem(\"credentials\")\r\n      ).timeTokenExpiresMS;\r\n      if (Date.now() >= timeTokenExpiresMS) {\r\n        axios.post(\"http://localhost:3001/refresh\", {\r\n            refreshToken,\r\n          })\r\n          .then((res) => {\r\n            console.log(res.data);\r\n            const credentials = {\r\n              refreshToken,\r\n              accessToken: res.data.accessToken,\r\n              expiresIn: res.data.expiresIn,\r\n              timeTokenExpiresMS: Date.now() + res.data.expiresIn * 1000,\r\n            };\r\n            localStorage.setItem(\"credentials\", JSON.stringify(credentials));\r\n          })\r\n          .catch((reason) => {\r\n            console.log(reason);\r\n          });\r\n      }\r\n    }\r\n  }, [code, credentials]);\r\n}\r\n",["85","86"],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Login\\Login.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Home\\Home.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Sidebar\\Sidebar.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\PlayBar.js",["87"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport \"./Playbar.css\";\r\nimport { ProgressBar } from \"./ProgressBar\";\r\nimport TrackControls from \"./TrackControls\";\r\nimport PlayNextSong from \"./PlayNextSong\";\r\nimport NowPlayingPreview from \"./NowPlayingPreview\";\r\nimport VolumeControls from \"./VolumeControls\";\r\nexport const PlayBar = ({\r\n  playbarArtistData,\r\n  accessToken,\r\n  playState,\r\n  setPlayState,\r\n  setPlaybarArtistData,\r\n  queueIndex,\r\n  setQueueIndex,\r\n  trackClicked,\r\n}) => {\r\n  // const [deviceData, setDeviceData] = useState([])\r\n  const [pause, setPause] = useState(false);\r\n  const [repeat, setRepeat] = useState(false);\r\n  const [shuffleActive, setShuffleActive] = useState(false);\r\n  const [totalDurationMs, setTotalDurationMs] = useState(0);\r\n  const [timeoutIndex, setTimeoutIndex] = useState();\r\n  const [indexZeroCheck, setIndexZeroCheck] = useState(false);\r\n  const [shuffleDelay, setShuffleDelay] = useState(0);\r\n\r\n  const updateState = function (call_back) {\r\n    setTimeout(function () {\r\n      call_back();\r\n    });\r\n  };\r\n\r\n  const isPlaying = useMemo(() => {\r\n    if (playbarArtistData.length !== 0 && playState) {\r\n      clearTimeout(timeoutIndex);\r\n      updateState(function () {\r\n        PlayNextSong(\r\n          playbarArtistData,\r\n          queueIndex,\r\n          setTotalDurationMs,\r\n          accessToken,\r\n          repeat,\r\n          setTimeoutIndex,\r\n          setQueueIndex,\r\n          setPlayState,\r\n          totalDurationMs\r\n        );\r\n      });\r\n    }\r\n  }, [queueIndex, playState, accessToken, playbarArtistData]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"track is starting to play\");\r\n  }, [isPlaying]);\r\n\r\n  return (\r\n    <div className=\"playbar\">\r\n      <div className=\"playbar-container\">\r\n        <NowPlayingPreview\r\n          playbarArtistData={playbarArtistData}\r\n          queueIndex={queueIndex}\r\n          playState={playState}\r\n          wait={1000}\r\n        />\r\n        <div className=\"playbar-play-controls\">\r\n          <TrackControls\r\n            setQueueIndex={setQueueIndex}\r\n            timeoutIndex={timeoutIndex}\r\n            queueIndex={queueIndex}\r\n            playbarArtistData={playbarArtistData}\r\n            setPlayState={setPlayState}\r\n            playState={playState}\r\n            setPause={setPause}\r\n            setShuffleActive={setShuffleActive}\r\n            shuffleActive={shuffleActive}\r\n            pause={pause}\r\n            setRepeat={setRepeat}\r\n            repeat={repeat}\r\n            accessToken={accessToken}\r\n            setTimeoutIndex={setTimeoutIndex}\r\n            setTotalDurationMs={setTotalDurationMs}\r\n            setIndexZeroCheck={setIndexZeroCheck}\r\n            indexZeroCheck={indexZeroCheck}\r\n            shuffleDelay={shuffleDelay}\r\n          />\r\n          <ProgressBar\r\n            totalDurationMs={totalDurationMs}\r\n            queueIndex={queueIndex}\r\n            accessToken={accessToken}\r\n            setQueueIndex={setQueueIndex}\r\n            indexZeroCheck={indexZeroCheck}\r\n            pause={pause}\r\n            setShuffleDelay={setShuffleDelay}\r\n            shuffleActive={shuffleActive}\r\n          />\r\n        </div>\r\n        <VolumeControls accessToken={accessToken} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Music Data Display\\MusicContainer.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Login\\LoginLogo.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\Sidebar\\TimeOfDayGreeting.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\ProgressBar.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\PlayNextSong.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\TrackControls.js",["88"],"import React, { useEffect, useRef } from \"react\";\r\nimport {\r\n  GiPreviousButton,\r\n  GiNextButton,\r\n  GiPlayButton,\r\n  GiPauseButton,\r\n} from \"react-icons/gi\";\r\nimport { RiRepeatFill, RiShuffleFill } from \"react-icons/ri\";\r\nimport { pauseTrack, resumeTrack } from \"../../../lib/api\";\r\nimport PlayNextSong from \"./PlayNextSong\";\r\n\r\nconst TrackControls = (props) => {\r\n  const queueIndex = props.queueIndex;\r\n  const setQueueIndex = props.setQueueIndex;\r\n  const shuffleActive = props.shuffleActive;\r\n  const setShuffleActive = props.setShuffleActive;\r\n  const repeat = props.repeat;\r\n  const setRepeat = props.setRepeat;\r\n  const pause = props.pause;\r\n  const setPause = props.setPause;\r\n  const playState = props.playState;\r\n  const setPlayState = props.setPlayState;\r\n  const playbarArtistData = props.playbarArtistData;\r\n  const timeoutIndex = props.timeoutIndex;\r\n  const setTimeoutIndex = props.setTimeoutIndex;\r\n  const setTotalDurationMs = props.setTotalDurationMs;\r\n  const accessToken = props.accessToken;\r\n  const indexZeroCheck = props.indexZeroCheck;\r\n  const setIndexZeroCheck = props.setIndexZeroCheck;\r\n  const shuffleDelay = props.shuffleDelay;\r\n  let shuffleListExecuted = useRef(false);\r\n  let shuffleTimeout = useRef();\r\n  const skipTrack = () => {\r\n    setQueueIndex((queueIndex) => queueIndex + 1);\r\n    clearTimeout(timeoutIndex);\r\n    if (queueIndex >= playbarArtistData.length - 1) {\r\n      pauseSong();\r\n      setPlayState(false);\r\n      setQueueIndex(0);\r\n    }\r\n  };\r\n  const previousTrack = () => {\r\n    if (queueIndex >= 1) {\r\n      setQueueIndex((queueIndex) => queueIndex - 1);\r\n      clearTimeout(timeoutIndex);\r\n    }\r\n    if (queueIndex < 1) {\r\n      PlayNextSong(\r\n        playbarArtistData,\r\n        queueIndex,\r\n        setTotalDurationMs,\r\n        accessToken,\r\n        repeat,\r\n        setTimeoutIndex,\r\n        setQueueIndex,\r\n        setPlayState\r\n      );\r\n      clearTimeout(timeoutIndex);\r\n      setIndexZeroCheck(!indexZeroCheck);\r\n    }\r\n  };\r\n  const pauseSong = () => {\r\n    setPause(true);\r\n    clearTimeout(timeoutIndex);\r\n    pauseTrack(accessToken);\r\n  };\r\n\r\n  const playSong = () => {\r\n    setPause(false);\r\n    clearTimeout(timeoutIndex);\r\n    resumeTrack(accessToken);\r\n  };\r\n\r\n  const shuffleList = () => {\r\n    console.log(shuffleDelay, \"SHUFFLEDELAY\");\r\n    shuffleTimeout.current = setTimeout(() => {\r\n      shuffleListExecuted.current = true;\r\n      playbarArtistData.sort(() => Math.random() - 0.5);\r\n    }, shuffleDelay);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (shuffleListExecuted.current === false && playState && shuffleActive) {\r\n      playbarArtistData.sort(() => Math.random() - 0.5);\r\n      clearTimeout(shuffleTimeout.current);\r\n    }\r\n  }, [queueIndex, playbarArtistData, playState]);\r\n  return (\r\n    <div className=\"playbar-play-icons\">\r\n      <button\r\n        className=\"shuffle-button\"\r\n        onClick={() => {\r\n          setShuffleActive(!shuffleActive);\r\n          shuffleList();\r\n        }}\r\n      >\r\n        {!shuffleActive ? (\r\n          <RiShuffleFill\r\n            className=\"shuffle-button-icon\"\r\n            style={{ fill: \"white\" }}\r\n          />\r\n        ) : (\r\n          <RiShuffleFill\r\n            className=\"shuffle-button-icon\"\r\n            style={{ fill: \"green\" }}\r\n          />\r\n        )}\r\n      </button>\r\n      <button\r\n        className=\"previous-button\"\r\n        onClick={() => {\r\n          previousTrack();\r\n        }}\r\n      >\r\n        <GiPreviousButton\r\n          className=\"previous-button-icon\"\r\n          style={{ fill: \"white\" }}\r\n        />\r\n      </button>\r\n      <button className=\"pause-play-button\">\r\n        {playState && !pause ? (\r\n          <GiPauseButton\r\n            className=\"track-pause-button\"\r\n            onClick={() => {\r\n              pauseSong();\r\n            }}\r\n            style={{ fill: \"white\" }}\r\n          />\r\n        ) : (\r\n          <GiPlayButton\r\n            className=\"track-play-button\"\r\n            onClick={() => {\r\n              playSong();\r\n            }}\r\n            style={{ fill: \"white\" }}\r\n          />\r\n        )}\r\n      </button>\r\n      <button\r\n        className=\"next-button\"\r\n        onClick={() => {\r\n          skipTrack();\r\n        }}\r\n      >\r\n        <GiNextButton className=\"next-button-icon\" style={{ fill: \"white\" }} />\r\n      </button>\r\n      <button className=\"repeat-button\" onClick={() => setRepeat(!repeat)}>\r\n        {!repeat ? (\r\n          <RiRepeatFill\r\n            className=\"repeat-button-icon\"\r\n            style={{ fill: \"white\" }}\r\n          />\r\n        ) : (\r\n          <RiRepeatFill\r\n            className=\"repeat-button-icon\"\r\n            style={{ fill: \"green\" }}\r\n          />\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrackControls;\r\n","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\NowPlayingPreview.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\VolumeControls.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\lib\\api.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\RuntimeDisplay.js",[],"C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\useRuntimeCounter.js",["89"],"import { useState, useEffect, useRef } from \"react\";\r\nimport { progressMs } from \"../../../lib/api\";\r\nexport const useRuntimeCounter = ({\r\n  totalDurationMs,\r\n  queueIndex,\r\n  setQueueIndex,\r\n  indexZeroCheck,\r\n  pause,\r\n  accessToken,\r\n}) => {\r\n  const [milliseconds, setMilliseconds] = useState(0);\r\n  const [change, setChange] = useState(false);\r\n  let interval = useRef();\r\n\r\n  const changeProgress = (ms) => {\r\n    clearInterval(interval.current);\r\n    setMilliseconds(ms);\r\n  };\r\n\r\n  const progressUpdating = (boolean) => {\r\n    if (boolean === true) {\r\n      setChange(boolean);\r\n      clearInterval(interval.current);\r\n      return boolean;\r\n    } else {\r\n      setChange(boolean);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (pause) {\r\n      clearInterval(interval.current);\r\n      progressMs(accessToken, setMilliseconds);\r\n    }\r\n  }, [pause, accessToken]);\r\n\r\n  useEffect(() => {\r\n    setMilliseconds(0);\r\n    clearInterval(interval.current);\r\n  }, [queueIndex, indexZeroCheck]);\r\n\r\n  useEffect(() => {\r\n    if (totalDurationMs > 0 && !change && !pause) {\r\n      clearInterval(interval.current);\r\n      const StartTimer = () => {\r\n        let remainderRuntime = totalDurationMs - milliseconds;\r\n        interval.current = setInterval(() => {\r\n          remainderRuntime -= 1000;\r\n          if (remainderRuntime > 0) {\r\n            setMilliseconds((seconds) => seconds + 1000);\r\n          } else {\r\n            clearInterval(interval.current);\r\n            setQueueIndex((queueIndex) => queueIndex + 1);\r\n          }\r\n        }, 1000);\r\n      };\r\n      StartTimer();\r\n    }\r\n  }, [totalDurationMs, change, setQueueIndex, indexZeroCheck, pause]);\r\n  return { milliseconds, changeProgress, progressUpdating };\r\n};\r\n","C:\\Users\\Emma\\OneDrive\\Documents\\Spectral-Music\\client\\src\\Dashboard\\Components\\PlayBar\\FormatTime.js",[],{"ruleId":"90","severity":1,"message":"91","line":27,"column":10,"nodeType":"92","messageId":"93","endLine":27,"endColumn":18},{"ruleId":"94","severity":1,"message":"95","line":57,"column":6,"nodeType":"96","endLine":57,"endColumn":25,"suggestions":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"94","severity":1,"message":"102","line":50,"column":6,"nodeType":"96","endLine":50,"endColumn":61,"suggestions":"103"},{"ruleId":"94","severity":1,"message":"104","line":87,"column":6,"nodeType":"96","endLine":87,"endColumn":48,"suggestions":"105"},{"ruleId":"94","severity":1,"message":"106","line":59,"column":6,"nodeType":"96","endLine":59,"endColumn":69,"suggestions":"107"},"no-unused-vars","'loggedIn' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLoggedIn'. Either include it or remove the dependency array. If 'setLoggedIn' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["108"],"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"React Hook useMemo has missing dependencies: 'repeat', 'setPlayState', 'setQueueIndex', 'timeoutIndex', and 'totalDurationMs'. Either include them or remove the dependency array.",["111"],"React Hook useEffect has a missing dependency: 'shuffleActive'. Either include it or remove the dependency array.",["112"],"React Hook useEffect has a missing dependency: 'milliseconds'. Either include it or remove the dependency array.",["113"],{"desc":"114","fix":"115"},"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [code, credentials, setLoggedIn]",{"range":"122","text":"123"},"Update the dependencies array to be: [playbarArtistData, playState, timeoutIndex, queueIndex, accessToken, repeat, setQueueIndex, setPlayState, totalDurationMs]",{"range":"124","text":"125"},"Update the dependencies array to be: [queueIndex, playbarArtistData, playState, shuffleActive]",{"range":"126","text":"127"},"Update the dependencies array to be: [totalDurationMs, change, setQueueIndex, indexZeroCheck, pause, milliseconds]",{"range":"128","text":"129"},[1861,1880],"[code, credentials, setLoggedIn]",[1520,1575],"[playbarArtistData, playState, timeoutIndex, queueIndex, accessToken, repeat, setQueueIndex, setPlayState, totalDurationMs]",[2707,2749],"[queueIndex, playbarArtistData, playState, shuffleActive]",[1591,1654],"[totalDurationMs, change, setQueueIndex, indexZeroCheck, pause, milliseconds]"]