{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emma\\\\OneDrive\\\\Documents\\\\Spectral-Music\\\\client\\\\src\\\\Dashboard\\\\Components\\\\PlayBar\\\\TrackControls.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport { GiPreviousButton, GiNextButton, GiPlayButton, GiPauseButton } from \"react-icons/gi\";\nimport { RiRepeatFill, RiShuffleFill } from \"react-icons/ri\";\nimport { pauseTrack, resumeTrack } from \"../../../lib/api\";\nimport PlayNextSong from \"./PlayNextSong\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TrackControls = props => {\n  _s();\n\n  const queueIndex = props.queueIndex;\n  const setQueueIndex = props.setQueueIndex;\n  const shuffleActive = props.shuffleActive;\n  const setShuffleActive = props.setShuffleActive;\n  const repeat = props.repeat;\n  const setRepeat = props.setRepeat;\n  const pause = props.pause;\n  const setPause = props.setPause;\n  const playState = props.playState;\n  const setPlayState = props.setPlayState;\n  const playbarArtistData = props.playbarArtistData;\n  const timeoutIndex = props.timeoutIndex;\n  const setTimeoutIndex = props.setTimeoutIndex;\n  const setTotalDurationMs = props.setTotalDurationMs;\n  const accessToken = props.accessToken;\n  const indexZeroCheck = props.indexZeroCheck;\n  const setIndexZeroCheck = props.setIndexZeroCheck;\n  const shuffleDelay = props.shuffleDelay;\n  let shuffleListExecuted = useRef(false);\n  let shuffleTimeout = useRef();\n\n  const skipTrack = () => {\n    setQueueIndex(queueIndex => queueIndex + 1);\n    clearTimeout(timeoutIndex);\n\n    if (queueIndex >= playbarArtistData.length - 1) {\n      pauseSong();\n      setPlayState(false);\n      setQueueIndex(0);\n    }\n  };\n\n  const previousTrack = () => {\n    if (queueIndex >= 1) {\n      setQueueIndex(queueIndex => queueIndex - 1);\n      clearTimeout(timeoutIndex);\n    }\n\n    if (queueIndex < 1) {\n      PlayNextSong(playbarArtistData, queueIndex, setTotalDurationMs, accessToken, repeat, setTimeoutIndex, setQueueIndex, setPlayState);\n      clearTimeout(timeoutIndex);\n      setIndexZeroCheck(!indexZeroCheck);\n    }\n  };\n\n  const pauseSong = () => {\n    setPause(true);\n    clearTimeout(timeoutIndex);\n    pauseTrack(accessToken);\n  };\n\n  const playSong = () => {\n    setPause(false);\n    clearTimeout(timeoutIndex);\n    resumeTrack(accessToken);\n  };\n\n  const shuffleList = () => {\n    console.log(shuffleDelay, \"SHUFFLEDELAY\");\n    shuffleTimeout.current = setTimeout(() => {\n      shuffleListExecuted.current = true;\n      playbarArtistData.sort(() => Math.random() - 0.5);\n    }, shuffleDelay);\n  };\n\n  useEffect(() => {\n    if (shuffleListExecuted.current === false && playState && shuffleActive) {\n      playbarArtistData.sort(() => Math.random() - 0.5);\n      clearTimeout(shuffleTimeout.current);\n    }\n  }, [queueIndex, playbarArtistData, playState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playbar-play-icons\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"shuffle-button\",\n      onClick: () => {\n        setShuffleActive(!shuffleActive);\n        shuffleList();\n      },\n      children: !shuffleActive ? /*#__PURE__*/_jsxDEV(RiShuffleFill, {\n        className: \"shuffle-button-icon\",\n        style: {\n          fill: \"white\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(RiShuffleFill, {\n        className: \"shuffle-button-icon\",\n        style: {\n          fill: \"green\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"previous-button\",\n      onClick: () => {\n        previousTrack();\n      },\n      children: /*#__PURE__*/_jsxDEV(GiPreviousButton, {\n        className: \"previous-button-icon\",\n        style: {\n          fill: \"white\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"pause-play-button\",\n      children: playState && !pause ? /*#__PURE__*/_jsxDEV(GiPauseButton, {\n        className: \"track-pause-button\",\n        onClick: () => {\n          pauseSong();\n        },\n        style: {\n          fill: \"white\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(GiPlayButton, {\n        className: \"track-play-button\",\n        onClick: () => {\n          playSong();\n        },\n        style: {\n          fill: \"white\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: () => {\n        skipTrack();\n      },\n      children: /*#__PURE__*/_jsxDEV(GiNextButton, {\n        className: \"next-button-icon\",\n        style: {\n          fill: \"white\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"repeat-button\",\n      onClick: () => setRepeat(!repeat),\n      children: !repeat ? /*#__PURE__*/_jsxDEV(RiRepeatFill, {\n        className: \"repeat-button-icon\",\n        style: {\n          fill: \"white\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(RiRepeatFill, {\n        className: \"repeat-button-icon\",\n        style: {\n          fill: \"green\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TrackControls, \"crjvrRQGUCNmyXdcQHnNo5w5Y18=\");\n\n_c = TrackControls;\nexport default TrackControls;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrackControls\");","map":{"version":3,"sources":["C:/Users/Emma/OneDrive/Documents/Spectral-Music/client/src/Dashboard/Components/PlayBar/TrackControls.js"],"names":["React","useEffect","useRef","GiPreviousButton","GiNextButton","GiPlayButton","GiPauseButton","RiRepeatFill","RiShuffleFill","pauseTrack","resumeTrack","PlayNextSong","TrackControls","props","queueIndex","setQueueIndex","shuffleActive","setShuffleActive","repeat","setRepeat","pause","setPause","playState","setPlayState","playbarArtistData","timeoutIndex","setTimeoutIndex","setTotalDurationMs","accessToken","indexZeroCheck","setIndexZeroCheck","shuffleDelay","shuffleListExecuted","shuffleTimeout","skipTrack","clearTimeout","length","pauseSong","previousTrack","playSong","shuffleList","console","log","current","setTimeout","sort","Math","random","fill"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport {\r\n  GiPreviousButton,\r\n  GiNextButton,\r\n  GiPlayButton,\r\n  GiPauseButton,\r\n} from \"react-icons/gi\";\r\nimport { RiRepeatFill, RiShuffleFill } from \"react-icons/ri\";\r\nimport { pauseTrack, resumeTrack } from \"../../../lib/api\";\r\nimport PlayNextSong from \"./PlayNextSong\";\r\n\r\nconst TrackControls = (props) => {\r\n  const queueIndex = props.queueIndex;\r\n  const setQueueIndex = props.setQueueIndex;\r\n  const shuffleActive = props.shuffleActive;\r\n  const setShuffleActive = props.setShuffleActive;\r\n  const repeat = props.repeat;\r\n  const setRepeat = props.setRepeat;\r\n  const pause = props.pause;\r\n  const setPause = props.setPause;\r\n  const playState = props.playState;\r\n  const setPlayState = props.setPlayState;\r\n  const playbarArtistData = props.playbarArtistData;\r\n  const timeoutIndex = props.timeoutIndex;\r\n  const setTimeoutIndex = props.setTimeoutIndex;\r\n  const setTotalDurationMs = props.setTotalDurationMs;\r\n  const accessToken = props.accessToken;\r\n  const indexZeroCheck = props.indexZeroCheck;\r\n  const setIndexZeroCheck = props.setIndexZeroCheck;\r\n  const shuffleDelay = props.shuffleDelay;\r\n  let shuffleListExecuted = useRef(false);\r\n  let shuffleTimeout = useRef();\r\n  const skipTrack = () => {\r\n    setQueueIndex((queueIndex) => queueIndex + 1);\r\n    clearTimeout(timeoutIndex);\r\n    if (queueIndex >= playbarArtistData.length - 1) {\r\n      pauseSong();\r\n      setPlayState(false);\r\n      setQueueIndex(0);\r\n    }\r\n  };\r\n  const previousTrack = () => {\r\n    if (queueIndex >= 1) {\r\n      setQueueIndex((queueIndex) => queueIndex - 1);\r\n      clearTimeout(timeoutIndex);\r\n    }\r\n    if (queueIndex < 1) {\r\n      PlayNextSong(\r\n        playbarArtistData,\r\n        queueIndex,\r\n        setTotalDurationMs,\r\n        accessToken,\r\n        repeat,\r\n        setTimeoutIndex,\r\n        setQueueIndex,\r\n        setPlayState\r\n      );\r\n      clearTimeout(timeoutIndex);\r\n      setIndexZeroCheck(!indexZeroCheck);\r\n    }\r\n  };\r\n  const pauseSong = () => {\r\n    setPause(true);\r\n    clearTimeout(timeoutIndex);\r\n    pauseTrack(accessToken);\r\n  };\r\n\r\n  const playSong = () => {\r\n    setPause(false);\r\n    clearTimeout(timeoutIndex);\r\n    resumeTrack(accessToken);\r\n  };\r\n\r\n  const shuffleList = () => {\r\n    console.log(shuffleDelay, \"SHUFFLEDELAY\");\r\n    shuffleTimeout.current = setTimeout(() => {\r\n      shuffleListExecuted.current = true;\r\n      playbarArtistData.sort(() => Math.random() - 0.5);\r\n    }, shuffleDelay);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (shuffleListExecuted.current === false && playState && shuffleActive) {\r\n      playbarArtistData.sort(() => Math.random() - 0.5);\r\n      clearTimeout(shuffleTimeout.current);\r\n    }\r\n  }, [queueIndex, playbarArtistData, playState]);\r\n  return (\r\n    <div className=\"playbar-play-icons\">\r\n      <button\r\n        className=\"shuffle-button\"\r\n        onClick={() => {\r\n          setShuffleActive(!shuffleActive);\r\n          shuffleList();\r\n        }}\r\n      >\r\n        {!shuffleActive ? (\r\n          <RiShuffleFill\r\n            className=\"shuffle-button-icon\"\r\n            style={{ fill: \"white\" }}\r\n          />\r\n        ) : (\r\n          <RiShuffleFill\r\n            className=\"shuffle-button-icon\"\r\n            style={{ fill: \"green\" }}\r\n          />\r\n        )}\r\n      </button>\r\n      <button\r\n        className=\"previous-button\"\r\n        onClick={() => {\r\n          previousTrack();\r\n        }}\r\n      >\r\n        <GiPreviousButton\r\n          className=\"previous-button-icon\"\r\n          style={{ fill: \"white\" }}\r\n        />\r\n      </button>\r\n      <button className=\"pause-play-button\">\r\n        {playState && !pause ? (\r\n          <GiPauseButton\r\n            className=\"track-pause-button\"\r\n            onClick={() => {\r\n              pauseSong();\r\n            }}\r\n            style={{ fill: \"white\" }}\r\n          />\r\n        ) : (\r\n          <GiPlayButton\r\n            className=\"track-play-button\"\r\n            onClick={() => {\r\n              playSong();\r\n            }}\r\n            style={{ fill: \"white\" }}\r\n          />\r\n        )}\r\n      </button>\r\n      <button\r\n        className=\"next-button\"\r\n        onClick={() => {\r\n          skipTrack();\r\n        }}\r\n      >\r\n        <GiNextButton className=\"next-button-icon\" style={{ fill: \"white\" }} />\r\n      </button>\r\n      <button className=\"repeat-button\" onClick={() => setRepeat(!repeat)}>\r\n        {!repeat ? (\r\n          <RiRepeatFill\r\n            className=\"repeat-button-icon\"\r\n            style={{ fill: \"white\" }}\r\n          />\r\n        ) : (\r\n          <RiRepeatFill\r\n            className=\"repeat-button-icon\"\r\n            style={{ fill: \"green\" }}\r\n          />\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrackControls;\r\n"]},"metadata":{},"sourceType":"module"}