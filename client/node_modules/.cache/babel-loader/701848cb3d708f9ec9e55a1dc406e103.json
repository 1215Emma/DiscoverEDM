{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emma\\\\OneDrive\\\\Documents\\\\Spectral-Music\\\\client\\\\src\\\\Dashboard\\\\Components\\\\PlayBar\\\\ProgressBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useRuntimeCounter } from \"./useRuntimeCounter\";\nimport { changePositionMs } from \"../../../lib/api\";\nimport { RuntimeDisplay } from \"./RuntimeDisplay\";\nimport { FormatTime } from \"./FormatTime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProgressBar = ({\n  totalDurationMs,\n  queueIndex,\n  accessToken,\n  setQueueIndex,\n  indexZeroCheck,\n  pause,\n  setShuffleDelay,\n  shuffleActive\n}) => {\n  _s();\n\n  let millisecondsCounter = useRuntimeCounter({\n    totalDurationMs,\n    queueIndex,\n    setQueueIndex,\n    indexZeroCheck,\n    pause,\n    accessToken\n  });\n  const durationMs = millisecondsCounter.milliseconds;\n\n  const seekPosition = () => {\n    changePositionMs(accessToken, durationMs);\n  };\n\n  useEffect(() => {\n    setShuffleDelay(totalDurationMs - durationMs);\n  }, [shuffleActive, setShuffleDelay, durationMs, totalDurationMs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"song-length-bar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-length-time-start\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-length-timer\",\n        children: /*#__PURE__*/_jsxDEV(RuntimeDisplay, {\n          durationMs: durationMs,\n          queueIndex: queueIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: 0,\n      max: totalDurationMs,\n      value: durationMs,\n      step: 1000,\n      onChange: event => {\n        millisecondsCounter.changeProgress(event.target.valueAsNumber);\n      },\n      onMouseUp: () => {\n        seekPosition(durationMs);\n        millisecondsCounter.progressUpdating(false);\n      },\n      onMouseDown: () => {\n        millisecondsCounter.progressUpdating(true);\n      },\n      className: \"song-length-slider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-length-time\",\n      children: FormatTime(totalDurationMs / 1000)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProgressBar, \"0WAJHbkVxoYzjZdIp20+h6vQuhk=\", false, function () {\n  return [useRuntimeCounter];\n});\n\n_c = ProgressBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"sources":["C:/Users/Emma/OneDrive/Documents/Spectral-Music/client/src/Dashboard/Components/PlayBar/ProgressBar.js"],"names":["React","useEffect","useRuntimeCounter","changePositionMs","RuntimeDisplay","FormatTime","ProgressBar","totalDurationMs","queueIndex","accessToken","setQueueIndex","indexZeroCheck","pause","setShuffleDelay","shuffleActive","millisecondsCounter","durationMs","milliseconds","seekPosition","event","changeProgress","target","valueAsNumber","progressUpdating"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,cAA3B;;AACA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAC1BC,EAAAA,eAD0B;AAE1BC,EAAAA,UAF0B;AAG1BC,EAAAA,WAH0B;AAI1BC,EAAAA,aAJ0B;AAK1BC,EAAAA,cAL0B;AAM1BC,EAAAA,KAN0B;AAO1BC,EAAAA,eAP0B;AAQ1BC,EAAAA;AAR0B,CAAD,KASrB;AAAA;;AACJ,MAAIC,mBAAmB,GAAGb,iBAAiB,CAAC;AAC1CK,IAAAA,eAD0C;AAE1CC,IAAAA,UAF0C;AAG1CE,IAAAA,aAH0C;AAI1CC,IAAAA,cAJ0C;AAK1CC,IAAAA,KAL0C;AAM1CH,IAAAA;AAN0C,GAAD,CAA3C;AAQA,QAAMO,UAAU,GAAGD,mBAAmB,CAACE,YAAvC;;AACA,QAAMC,YAAY,GAAG,MAAM;AACzBf,IAAAA,gBAAgB,CAACM,WAAD,EAAcO,UAAd,CAAhB;AACD,GAFD;;AAGAf,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,eAAe,CAACN,eAAe,GAAGS,UAAnB,CAAf;AACD,GAFQ,EAEN,CAACF,aAAD,EAAgBD,eAAhB,EAAiCG,UAAjC,EAA6CT,eAA7C,CAFM,CAAT;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,+BACE,QAAC,cAAD;AAAgB,UAAA,UAAU,EAAES,UAA5B;AAAwC,UAAA,UAAU,EAAER;AAApD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,GAAG,EAAE,CAFP;AAGE,MAAA,GAAG,EAAED,eAHP;AAIE,MAAA,KAAK,EAAES,UAJT;AAKE,MAAA,IAAI,EAAE,IALR;AAME,MAAA,QAAQ,EAAGG,KAAD,IAAW;AACnBJ,QAAAA,mBAAmB,CAACK,cAApB,CAAmCD,KAAK,CAACE,MAAN,CAAaC,aAAhD;AACD,OARH;AASE,MAAA,SAAS,EAAE,MAAM;AACfJ,QAAAA,YAAY,CAACF,UAAD,CAAZ;AACAD,QAAAA,mBAAmB,CAACQ,gBAApB,CAAqC,KAArC;AACD,OAZH;AAaE,MAAA,WAAW,EAAE,MAAM;AACjBR,QAAAA,mBAAmB,CAACQ,gBAApB,CAAqC,IAArC;AACD,OAfH;AAgBE,MAAA,SAAS,EAAC;AAhBZ;AAAA;AAAA;AAAA;AAAA,YANF,eAwBE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,gBACGlB,UAAU,CAACE,eAAe,GAAG,IAAnB;AADb;AAAA;AAAA;AAAA;AAAA,YAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CAvDM;;GAAMD,W;UAUeJ,iB;;;KAVfI,W","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useRuntimeCounter } from \"./useRuntimeCounter\";\r\nimport { changePositionMs } from \"../../../lib/api\";\r\nimport { RuntimeDisplay } from \"./RuntimeDisplay\";\r\nimport { FormatTime } from \"./FormatTime\";\r\nexport const ProgressBar = ({\r\n  totalDurationMs,\r\n  queueIndex,\r\n  accessToken,\r\n  setQueueIndex,\r\n  indexZeroCheck,\r\n  pause,\r\n  setShuffleDelay,\r\n  shuffleActive,\r\n}) => {\r\n  let millisecondsCounter = useRuntimeCounter({\r\n    totalDurationMs,\r\n    queueIndex,\r\n    setQueueIndex,\r\n    indexZeroCheck,\r\n    pause,\r\n    accessToken,\r\n  });\r\n  const durationMs = millisecondsCounter.milliseconds;\r\n  const seekPosition = () => {\r\n    changePositionMs(accessToken, durationMs);\r\n  };\r\n  useEffect(() => {\r\n    setShuffleDelay(totalDurationMs - durationMs);\r\n  }, [shuffleActive, setShuffleDelay, durationMs, totalDurationMs]);\r\n  return (\r\n    <div className=\"song-length-bar\">\r\n      <div className=\"song-length-time-start\">\r\n        <div className=\"song-length-timer\">\r\n          <RuntimeDisplay durationMs={durationMs} queueIndex={queueIndex} />\r\n        </div>\r\n      </div>\r\n      <input\r\n        type=\"range\"\r\n        min={0}\r\n        max={totalDurationMs}\r\n        value={durationMs}\r\n        step={1000}\r\n        onChange={(event) => {\r\n          millisecondsCounter.changeProgress(event.target.valueAsNumber);\r\n        }}\r\n        onMouseUp={() => {\r\n          seekPosition(durationMs);\r\n          millisecondsCounter.progressUpdating(false);\r\n        }}\r\n        onMouseDown={() => {\r\n          millisecondsCounter.progressUpdating(true);\r\n        }}\r\n        className=\"song-length-slider\"\r\n      />\r\n      <div className=\"song-length-time\">\r\n        {FormatTime(totalDurationMs / 1000)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}