{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { progressMs } from \"../../../lib/api\";\nexport const useRuntimeCounter = ({\n  totalDurationMs,\n  queueIndex,\n  setQueueIndex,\n  indexZeroCheck,\n  pause,\n  accessToken\n}) => {\n  _s();\n\n  const [milliseconds, setMilliseconds] = useState(0);\n  const [change, setChange] = useState(false);\n  let interval = useRef();\n\n  const changeProgress = ms => {\n    clearInterval(interval.current);\n    setMilliseconds(ms);\n  };\n\n  const progressUpdating = boolean => {\n    if (boolean === true) {\n      setChange(boolean);\n      clearInterval(interval.current);\n      return boolean;\n    } else {\n      setChange(boolean);\n    }\n  };\n\n  useEffect(() => {\n    if (pause) {\n      clearInterval(interval.current);\n      progressMs(accessToken, setMilliseconds);\n    }\n  }, [pause, accessToken]);\n  useEffect(() => {\n    setMilliseconds(0);\n    clearInterval(interval.current);\n  }, [queueIndex, indexZeroCheck]);\n  useEffect(() => {\n    if (totalDurationMs > 0 && !change && !pause) {\n      clearInterval(interval.current);\n\n      const StartTimer = () => {\n        let remainderRuntime = totalDurationMs - milliseconds;\n        interval.current = setInterval(() => {\n          remainderRuntime -= 1000;\n\n          if (remainderRuntime > 0) {\n            setMilliseconds(seconds => seconds + 1000);\n          } else {\n            clearInterval(interval.current);\n            setQueueIndex(queueIndex => queueIndex + 1);\n          }\n        }, 1000);\n      };\n\n      StartTimer();\n    }\n  }, [totalDurationMs, change, setQueueIndex, indexZeroCheck, pause]);\n  return {\n    milliseconds,\n    changeProgress,\n    progressUpdating\n  };\n};\n\n_s(useRuntimeCounter, \"aHa7ECEff31mEEZmnmVTfEHH0xc=\");","map":{"version":3,"sources":["C:/Users/Emma/OneDrive/Documents/Spectral-Music/client/src/Dashboard/Components/PlayBar/useRuntimeCounter.js"],"names":["useState","useEffect","useRef","progressMs","useRuntimeCounter","totalDurationMs","queueIndex","setQueueIndex","indexZeroCheck","pause","accessToken","milliseconds","setMilliseconds","change","setChange","interval","changeProgress","ms","clearInterval","current","progressUpdating","boolean","StartTimer","remainderRuntime","setInterval","seconds"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAO,MAAMC,iBAAiB,GAAG,CAAC;AAChCC,EAAAA,eADgC;AAEhCC,EAAAA,UAFgC;AAGhCC,EAAAA,aAHgC;AAIhCC,EAAAA,cAJgC;AAKhCC,EAAAA,KALgC;AAMhCC,EAAAA;AANgC,CAAD,KAO3B;AAAA;;AACJ,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,KAAD,CAApC;AACA,MAAIe,QAAQ,GAAGb,MAAM,EAArB;;AAEA,QAAMc,cAAc,GAAIC,EAAD,IAAQ;AAC7BC,IAAAA,aAAa,CAACH,QAAQ,CAACI,OAAV,CAAb;AACAP,IAAAA,eAAe,CAACK,EAAD,CAAf;AACD,GAHD;;AAKA,QAAMG,gBAAgB,GAAIC,OAAD,IAAa;AACpC,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBP,MAAAA,SAAS,CAACO,OAAD,CAAT;AACAH,MAAAA,aAAa,CAACH,QAAQ,CAACI,OAAV,CAAb;AACA,aAAOE,OAAP;AACD,KAJD,MAIO;AACLP,MAAAA,SAAS,CAACO,OAAD,CAAT;AACD;AACF,GARD;;AAUApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,KAAJ,EAAW;AACTS,MAAAA,aAAa,CAACH,QAAQ,CAACI,OAAV,CAAb;AACAhB,MAAAA,UAAU,CAACO,WAAD,EAAcE,eAAd,CAAV;AACD;AACF,GALQ,EAKN,CAACH,KAAD,EAAQC,WAAR,CALM,CAAT;AAOAT,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,eAAe,CAAC,CAAD,CAAf;AACAM,IAAAA,aAAa,CAACH,QAAQ,CAACI,OAAV,CAAb;AACD,GAHQ,EAGN,CAACb,UAAD,EAAaE,cAAb,CAHM,CAAT;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,eAAe,GAAG,CAAlB,IAAuB,CAACQ,MAAxB,IAAkC,CAACJ,KAAvC,EAA8C;AAC5CS,MAAAA,aAAa,CAACH,QAAQ,CAACI,OAAV,CAAb;;AACA,YAAMG,UAAU,GAAG,MAAM;AACvB,YAAIC,gBAAgB,GAAGlB,eAAe,GAAGM,YAAzC;AACAI,QAAAA,QAAQ,CAACI,OAAT,GAAmBK,WAAW,CAAC,MAAM;AACnCD,UAAAA,gBAAgB,IAAI,IAApB;;AACA,cAAIA,gBAAgB,GAAG,CAAvB,EAA0B;AACxBX,YAAAA,eAAe,CAAEa,OAAD,IAAaA,OAAO,GAAG,IAAxB,CAAf;AACD,WAFD,MAEO;AACLP,YAAAA,aAAa,CAACH,QAAQ,CAACI,OAAV,CAAb;AACAZ,YAAAA,aAAa,CAAED,UAAD,IAAgBA,UAAU,GAAG,CAA9B,CAAb;AACD;AACF,SAR6B,EAQ3B,IAR2B,CAA9B;AASD,OAXD;;AAYAgB,MAAAA,UAAU;AACX;AACF,GAjBQ,EAiBN,CAACjB,eAAD,EAAkBQ,MAAlB,EAA0BN,aAA1B,EAAyCC,cAAzC,EAAyDC,KAAzD,CAjBM,CAAT;AAkBA,SAAO;AAAEE,IAAAA,YAAF;AAAgBK,IAAAA,cAAhB;AAAgCI,IAAAA;AAAhC,GAAP;AACD,CA1DM;;GAAMhB,iB","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport { progressMs } from \"../../../lib/api\";\r\nexport const useRuntimeCounter = ({\r\n  totalDurationMs,\r\n  queueIndex,\r\n  setQueueIndex,\r\n  indexZeroCheck,\r\n  pause,\r\n  accessToken,\r\n}) => {\r\n  const [milliseconds, setMilliseconds] = useState(0);\r\n  const [change, setChange] = useState(false);\r\n  let interval = useRef();\r\n\r\n  const changeProgress = (ms) => {\r\n    clearInterval(interval.current);\r\n    setMilliseconds(ms);\r\n  };\r\n\r\n  const progressUpdating = (boolean) => {\r\n    if (boolean === true) {\r\n      setChange(boolean);\r\n      clearInterval(interval.current);\r\n      return boolean;\r\n    } else {\r\n      setChange(boolean);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (pause) {\r\n      clearInterval(interval.current);\r\n      progressMs(accessToken, setMilliseconds);\r\n    }\r\n  }, [pause, accessToken]);\r\n\r\n  useEffect(() => {\r\n    setMilliseconds(0);\r\n    clearInterval(interval.current);\r\n  }, [queueIndex, indexZeroCheck]);\r\n\r\n  useEffect(() => {\r\n    if (totalDurationMs > 0 && !change && !pause) {\r\n      clearInterval(interval.current);\r\n      const StartTimer = () => {\r\n        let remainderRuntime = totalDurationMs - milliseconds;\r\n        interval.current = setInterval(() => {\r\n          remainderRuntime -= 1000;\r\n          if (remainderRuntime > 0) {\r\n            setMilliseconds((seconds) => seconds + 1000);\r\n          } else {\r\n            clearInterval(interval.current);\r\n            setQueueIndex((queueIndex) => queueIndex + 1);\r\n          }\r\n        }, 1000);\r\n      };\r\n      StartTimer();\r\n    }\r\n  }, [totalDurationMs, change, setQueueIndex, indexZeroCheck, pause]);\r\n  return { milliseconds, changeProgress, progressUpdating };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}