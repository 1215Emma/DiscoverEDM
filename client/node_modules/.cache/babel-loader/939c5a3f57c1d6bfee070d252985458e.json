{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emma\\\\OneDrive\\\\Documents\\\\Spectral-Music\\\\client\\\\src\\\\Dashboard\\\\Components\\\\Music Data Display\\\\MusicContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./MusicContainer.css\";\nimport { GrPlay } from \"react-icons/gr\";\nimport { searchAlbums, searchArtists, trackData } from \"../../../lib/api\"; // The music container. Parent function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MusicContainer = ({\n  artistIdentifier,\n  setPlaybarArtistData,\n  playbarArtistData,\n  accessToken,\n  setPlayState,\n  setQueueIndex,\n  playState,\n  trackClicked,\n  setTrackClicked,\n  setShowHome\n}) => {\n  _s();\n\n  artistIdentifier = artistIdentifier.replace(/%20/g, \" \");\n  window.history.pushState({\n    urlPath: `/ ${artistIdentifier}`\n  }, \"\", `/ ${artistIdentifier}`);\n  const [artistData, setArtistData] = useState([]);\n  const [albumClicked, setAlbumClicked] = useState(false);\n  const [albumClickedData, setAlbumClickedData] = useState([]);\n  useEffect(() => {\n    if (artistIdentifier) {\n      console.log(\"uwu\");\n      setArtistData([]);\n      setAlbumClickedData([]);\n      setAlbumClicked(false);\n      setShowHome(false);\n      setTimeout(() => {\n        searchAlbums(artistIdentifier, accessToken, setArtistData);\n        searchArtists(artistIdentifier, accessToken, setArtistData);\n      }, 250);\n    }\n  }, [artistIdentifier, accessToken, setShowHome]);\n  useEffect(() => {\n    if (artistData.length > 2) {\n      const convertMetadata = () => {\n        const trackIds = []; // the user has NEVER clicked an album\n\n        if (!albumClicked && !playState && !trackClicked) {\n          const artistTopTracks = artistData.find(trackInfo => {\n            return trackInfo.topTracks;\n          });\n          artistTopTracks.topTracks.map(topTracks => {\n            return trackIds.push(topTracks.id);\n          });\n          trackData(accessToken, trackIds, setPlaybarArtistData);\n          setTrackClicked(false);\n        } // the user has clicked an album which you can only get to from clicking an artist\n\n\n        if (albumClickedData && albumClicked && playState && trackClicked) {\n          const trackIds = [];\n          albumClickedData.tracks.items.map(albumTracks => {\n            return trackIds.push(albumTracks.id);\n          });\n          trackData(accessToken, trackIds, setPlaybarArtistData);\n          setTrackClicked(false);\n        }\n\n        if (!albumClicked && playState && trackClicked) {\n          const artistTopTracks = artistData.find(trackInfo => {\n            return trackInfo.topTracks;\n          });\n          artistTopTracks.topTracks.map(topTracks => {\n            return trackIds.push(topTracks.id);\n          });\n          trackData(accessToken, trackIds, setPlaybarArtistData);\n          setTrackClicked(false);\n        }\n      };\n\n      convertMetadata();\n    }\n  }, [artistData, albumClicked, trackClicked, accessToken, playState, albumClickedData, setPlaybarArtistData, setTrackClicked]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"music-container\",\n    children: [/*#__PURE__*/_jsxDEV(MusicContainerHeader, {\n      artistData: artistData,\n      albumClicked: albumClicked,\n      albumClickedData: albumClickedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-container-tracks\",\n      children: /*#__PURE__*/_jsxDEV(MusicContainerTracks, {\n        artistData: artistData,\n        albumClicked: albumClicked,\n        albumClickedData: albumClickedData,\n        setPlaybarArtistData: setPlaybarArtistData,\n        accessToken: accessToken,\n        setPlayState: setPlayState,\n        setQueueIndex: setQueueIndex,\n        setTrackClicked: setTrackClicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-container-albums\",\n      children: /*#__PURE__*/_jsxDEV(MusicContainerAlbums, {\n        artistData: artistData,\n        setAlbumClicked: setAlbumClicked,\n        setAlbumClickedData: setAlbumClickedData,\n        albumClicked: albumClicked,\n        setTrackClicked: setTrackClicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}; // Displays the header with image and name of the music container. Child 1\n\n_s(MusicContainer, \"F2EvSKw8G0Mz1qD6ylQzvoSTqU4=\");\n\n_c = MusicContainer;\nexport const MusicContainerHeader = ({\n  artistData,\n  albumClicked,\n  albumClickedData\n}) => {\n  const artistDataInfo = artistData.find(artistInfo => {\n    return artistInfo.searchedArtists;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: artistDataInfo === undefined ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : albumClickedData && albumClicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-container-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"music-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: albumClickedData.images[0].url,\n          alt: \"\",\n          className: \"music-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"music-name\",\n          children: albumClickedData.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-container-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"music-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: artistDataInfo.searchedArtists.artistImage.url,\n          alt: \"\",\n          className: \"music-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"music-name\",\n          children: artistDataInfo.searchedArtists.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}; // Displays the albums component of the music container. Child 2\n\n_c2 = MusicContainerHeader;\nexport const MusicContainerAlbums = ({\n  artistData,\n  setAlbumClicked,\n  setAlbumClickedData,\n  albumClicked,\n  setTrackClicked\n}) => {\n  const artistAlbums = artistData.find(albums => {\n    return albums.searchedAlbums;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Albums\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), artistAlbums === undefined ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-container-albums-main\",\n      children: artistAlbums.searchedAlbums.map(albums => {\n        if (albums.name.length > 18) {\n          albums.name = albums.name.slice(0, 18) + \"...\";\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => {\n            setAlbumClicked(true);\n            setAlbumClickedData(albums);\n            setTrackClicked(false);\n          },\n          className: \"music-container-albums-button\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"music-albums-individual-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: albums.images[1].url,\n              alt: \"\",\n              className: \"music-album-cover\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"music-album-name\",\n              children: albums.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }, this)\n        }, albums.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}; // Displays tracks component of the music container. Child 3\n\n_c3 = MusicContainerAlbums;\nexport const MusicContainerTracks = ({\n  artistData,\n  albumClicked,\n  albumClickedData,\n  setPlaybarArtistData,\n  setPlayState,\n  setQueueIndex,\n  setTrackClicked\n}) => {\n  const artistTopTracks = artistData.find(trackInfo => {\n    return trackInfo.topTracks;\n  });\n\n  const SongDuration = x => {\n    const minutes = Math.floor(x / 60000);\n    const seconds = (x % 60000 / 1000).toFixed(0);\n    const songDur = minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    return songDur;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Popular Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-tracks-container-main\",\n      children: artistTopTracks === undefined ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : albumClickedData && albumClicked ? albumClickedData.tracks.items.map((track, index) => {\n        const songDuration = SongDuration(track.duration_ms);\n        let trackTitle = track.name;\n\n        if (trackTitle.length > 50) {\n          trackTitle = trackTitle.slice(0, 50) + \"...\";\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"music-track-buttons-container\",\n          onClick: () => {\n            setPlayState(true);\n            setQueueIndex(index);\n            setTrackClicked(true);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"music-track-info-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"music-track-hover-display\",\n              children: [/*#__PURE__*/_jsxDEV(GrPlay, {\n                className: \"music-track-play-button\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"music-track-count\",\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"music-track-name\",\n              children: trackTitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"music-track-runtime\",\n              children: songDuration\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this)\n        }, track.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this);\n      }) : artistTopTracks.topTracks.map((track, index) => {\n        const songDuration = SongDuration(track.duration_ms);\n        let trackTitle = track.name;\n\n        if (trackTitle.length > 50) {\n          trackTitle = trackTitle.slice(0, 50) + \"...\";\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"music-track-buttons-container\",\n          onClick: () => {\n            setPlayState(true);\n            setQueueIndex(index);\n            setTrackClicked(true);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"music-track-info-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"music-track-hover-display\",\n              children: [/*#__PURE__*/_jsxDEV(GrPlay, {\n                className: \"music-track-play-button\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"music-track-count\",\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: track.album.images[2].url,\n              alt: \"\",\n              className: \"banner-track-album-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"music-track-name\",\n              children: trackTitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"music-track-runtime\",\n              children: songDuration\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 15\n          }, this)\n        }, track.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_c4 = MusicContainerTracks;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"MusicContainer\");\n$RefreshReg$(_c2, \"MusicContainerHeader\");\n$RefreshReg$(_c3, \"MusicContainerAlbums\");\n$RefreshReg$(_c4, \"MusicContainerTracks\");","map":{"version":3,"sources":["C:/Users/Emma/OneDrive/Documents/Spectral-Music/client/src/Dashboard/Components/Music Data Display/MusicContainer.js"],"names":["React","useState","useEffect","GrPlay","searchAlbums","searchArtists","trackData","MusicContainer","artistIdentifier","setPlaybarArtistData","playbarArtistData","accessToken","setPlayState","setQueueIndex","playState","trackClicked","setTrackClicked","setShowHome","replace","window","history","pushState","urlPath","artistData","setArtistData","albumClicked","setAlbumClicked","albumClickedData","setAlbumClickedData","console","log","setTimeout","length","convertMetadata","trackIds","artistTopTracks","find","trackInfo","topTracks","map","push","id","tracks","items","albumTracks","MusicContainerHeader","artistDataInfo","artistInfo","searchedArtists","undefined","images","url","name","artistImage","artist","MusicContainerAlbums","artistAlbums","albums","searchedAlbums","slice","e","MusicContainerTracks","SongDuration","x","minutes","Math","floor","seconds","toFixed","songDur","track","index","songDuration","duration_ms","trackTitle","album"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./MusicContainer.css\";\r\nimport { GrPlay } from \"react-icons/gr\";\r\nimport { searchAlbums, searchArtists, trackData } from \"../../../lib/api\";\r\n\r\n// The music container. Parent function\r\nexport const MusicContainer = ({\r\n  artistIdentifier,\r\n  setPlaybarArtistData,\r\n  playbarArtistData,\r\n  accessToken,\r\n  setPlayState,\r\n  setQueueIndex,\r\n  playState,\r\n  trackClicked,\r\n  setTrackClicked,\r\n  setShowHome,\r\n}) => {\r\n  artistIdentifier = artistIdentifier.replace(/%20/g, \" \");\r\n  window.history.pushState(\r\n    { urlPath: `/ ${artistIdentifier}` },\r\n    \"\",\r\n    `/ ${artistIdentifier}`\r\n  );\r\n  const [artistData, setArtistData] = useState([]);\r\n  const [albumClicked, setAlbumClicked] = useState(false);\r\n  const [albumClickedData, setAlbumClickedData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (artistIdentifier) {\r\n      console.log(\"uwu\");\r\n      setArtistData([]);\r\n      setAlbumClickedData([]);\r\n      setAlbumClicked(false);\r\n      setShowHome(false);\r\n      setTimeout(() => {\r\n        searchAlbums(artistIdentifier, accessToken, setArtistData);\r\n        searchArtists(artistIdentifier, accessToken, setArtistData);\r\n      }, 250);\r\n    }\r\n  }, [artistIdentifier, accessToken, setShowHome]);\r\n\r\n  useEffect(() => {\r\n    if (artistData.length > 2) {\r\n      const convertMetadata = () => {\r\n        const trackIds = [];\r\n        // the user has NEVER clicked an album\r\n        if (!albumClicked && !playState && !trackClicked) {\r\n          const artistTopTracks = artistData.find((trackInfo) => {\r\n            return trackInfo.topTracks;\r\n          });\r\n          artistTopTracks.topTracks.map((topTracks) => {\r\n            return trackIds.push(topTracks.id);\r\n          });\r\n          trackData(accessToken, trackIds, setPlaybarArtistData);\r\n          setTrackClicked(false);\r\n        }\r\n        // the user has clicked an album which you can only get to from clicking an artist\r\n        if (albumClickedData && albumClicked && playState && trackClicked) {\r\n          const trackIds = [];\r\n          albumClickedData.tracks.items.map((albumTracks) => {\r\n            return trackIds.push(albumTracks.id);\r\n          });\r\n          trackData(accessToken, trackIds, setPlaybarArtistData);\r\n          setTrackClicked(false);\r\n        }\r\n        if (!albumClicked && playState && trackClicked) {\r\n          const artistTopTracks = artistData.find((trackInfo) => {\r\n            return trackInfo.topTracks;\r\n          });\r\n          artistTopTracks.topTracks.map((topTracks) => {\r\n            return trackIds.push(topTracks.id);\r\n          });\r\n          trackData(accessToken, trackIds, setPlaybarArtistData);\r\n          setTrackClicked(false);\r\n        }\r\n      };\r\n      convertMetadata();\r\n    }\r\n  }, [\r\n    artistData,\r\n    albumClicked,\r\n    trackClicked,\r\n    accessToken,\r\n    playState,\r\n    albumClickedData,\r\n    setPlaybarArtistData,\r\n    setTrackClicked,\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"music-container\">\r\n      <MusicContainerHeader\r\n        artistData={artistData}\r\n        albumClicked={albumClicked}\r\n        albumClickedData={albumClickedData}\r\n      />\r\n      <div className=\"music-container-tracks\">\r\n        <MusicContainerTracks\r\n          artistData={artistData}\r\n          albumClicked={albumClicked}\r\n          albumClickedData={albumClickedData}\r\n          setPlaybarArtistData={setPlaybarArtistData}\r\n          accessToken={accessToken}\r\n          setPlayState={setPlayState}\r\n          setQueueIndex={setQueueIndex}\r\n          setTrackClicked={setTrackClicked}\r\n        />\r\n      </div>\r\n      <div className=\"music-container-albums\">\r\n        <MusicContainerAlbums\r\n          artistData={artistData}\r\n          setAlbumClicked={setAlbumClicked}\r\n          setAlbumClickedData={setAlbumClickedData}\r\n          albumClicked={albumClicked}\r\n          setTrackClicked={setTrackClicked}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Displays the header with image and name of the music container. Child 1\r\nexport const MusicContainerHeader = ({\r\n  artistData,\r\n  albumClicked,\r\n  albumClickedData,\r\n}) => {\r\n  const artistDataInfo = artistData.find((artistInfo) => {\r\n    return artistInfo.searchedArtists;\r\n  });\r\n  return (\r\n    <>\r\n      {artistDataInfo === undefined ? (\r\n        <></>\r\n      ) : albumClickedData && albumClicked ? (\r\n        <div className=\"music-container-header\">\r\n          <div className=\"music-header\">\r\n            <img\r\n              src={albumClickedData.images[0].url}\r\n              alt=\"\"\r\n              className=\"music-image\"\r\n            />\r\n            <div className=\"music-name\">{albumClickedData.name}</div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"music-container-header\">\r\n          <div className=\"music-header\">\r\n            <img\r\n              src={artistDataInfo.searchedArtists.artistImage.url}\r\n              alt=\"\"\r\n              className=\"music-image\"\r\n            />\r\n            <div className=\"music-name\">\r\n              {artistDataInfo.searchedArtists.artist}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n// Displays the albums component of the music container. Child 2\r\nexport const MusicContainerAlbums = ({\r\n  artistData,\r\n  setAlbumClicked,\r\n  setAlbumClickedData,\r\n  albumClicked,\r\n  setTrackClicked,\r\n}) => {\r\n  const artistAlbums = artistData.find((albums) => {\r\n    return albums.searchedAlbums;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <h1>Albums</h1>\r\n      {artistAlbums === undefined ? (\r\n        <></>\r\n      ) : (\r\n        <div className=\"music-container-albums-main\">\r\n          {artistAlbums.searchedAlbums.map((albums) => {\r\n            if (albums.name.length > 18) {\r\n              albums.name = albums.name.slice(0, 18) + \"...\";\r\n            }\r\n            return (\r\n              <button\r\n                onClick={(e) => {\r\n                  setAlbumClicked(true);\r\n                  setAlbumClickedData(albums);\r\n                  setTrackClicked(false);\r\n                }}\r\n                className=\"music-container-albums-button\"\r\n                key={albums.id}\r\n              >\r\n                <div className=\"music-albums-individual-container\">\r\n                  <img\r\n                    src={albums.images[1].url}\r\n                    alt=\"\"\r\n                    className=\"music-album-cover\"\r\n                  />\r\n                  <div className=\"music-album-name\">{albums.name}</div>\r\n                </div>\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n// Displays tracks component of the music container. Child 3\r\nexport const MusicContainerTracks = ({\r\n  artistData,\r\n  albumClicked,\r\n  albumClickedData,\r\n  setPlaybarArtistData,\r\n  setPlayState,\r\n  setQueueIndex,\r\n  setTrackClicked,\r\n}) => {\r\n  const artistTopTracks = artistData.find((trackInfo) => {\r\n    return trackInfo.topTracks;\r\n  });\r\n  const SongDuration = (x) => {\r\n    const minutes = Math.floor(x / 60000);\r\n    const seconds = ((x % 60000) / 1000).toFixed(0);\r\n    const songDur = minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n    return songDur;\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <h1>Popular Songs</h1>\r\n    <div className=\"music-tracks-container-main\">\r\n      {artistTopTracks === undefined ? (\r\n        <></>\r\n      ) : albumClickedData && albumClicked ? (\r\n        albumClickedData.tracks.items.map((track, index) => {\r\n          const songDuration = SongDuration(track.duration_ms);\r\n          let trackTitle = track.name;\r\n          if (trackTitle.length > 50) {\r\n            trackTitle = trackTitle.slice(0, 50) + \"...\";\r\n          }\r\n          return (\r\n            <button\r\n              className=\"music-track-buttons-container\"\r\n              onClick={() => {\r\n                setPlayState(true);\r\n                setQueueIndex(index);\r\n                setTrackClicked(true);\r\n              }}\r\n              key={track.id}\r\n            >\r\n              <div className=\"music-track-info-container\">\r\n                <div className=\"music-track-hover-display\">\r\n                  <GrPlay className=\"music-track-play-button\" />\r\n                  <div className=\"music-track-count\">{index + 1}</div>\r\n                </div>\r\n                <div className=\"music-track-name\">{trackTitle}</div>\r\n                <div className=\"music-track-runtime\">{songDuration}</div>\r\n              </div>\r\n            </button>\r\n          );\r\n        })\r\n      ) : (\r\n        artistTopTracks.topTracks.map((track, index) => {\r\n          const songDuration = SongDuration(track.duration_ms);\r\n          let trackTitle = track.name;\r\n          if (trackTitle.length > 50) {\r\n            trackTitle = trackTitle.slice(0, 50) + \"...\";\r\n          }\r\n          return (\r\n            <button\r\n              className=\"music-track-buttons-container\"\r\n              onClick={() => {\r\n                setPlayState(true);\r\n                setQueueIndex(index);\r\n                setTrackClicked(true);\r\n              }}\r\n              key={track.id}\r\n            >\r\n              <div className=\"music-track-info-container\">\r\n                <div className=\"music-track-hover-display\">\r\n                  <GrPlay className=\"music-track-play-button\" />\r\n                  <div className=\"music-track-count\">{index + 1}</div>\r\n                </div>\r\n                <img\r\n                  src={track.album.images[2].url}\r\n                  alt=\"\"\r\n                  className=\"banner-track-album-image\"\r\n                />\r\n                <div className=\"music-track-name\">{trackTitle}</div>\r\n                <div className=\"music-track-runtime\">{songDuration}</div>\r\n              </div>\r\n            </button>\r\n          );\r\n        })\r\n      )}\r\n      </div>\r\n      </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}